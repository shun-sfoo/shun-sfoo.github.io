<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data-struct on Even - A super concise theme for Hugo</title>
    <link>http://localhost:1313/tags/data-struct/</link>
    <description>Recent content in data-struct on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 29 Dec 2020 22:10:09 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/data-struct/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据结构-红黑树</title>
      <link>http://localhost:1313/post/data-struct/rbtree/</link>
      <pubDate>Tue, 29 Dec 2020 22:10:09 +0800</pubDate>
      
      <guid>http://localhost:1313/post/data-struct/rbtree/</guid>
      <description>红黑树性质 结合 2-3 树理解 每个节点或者是红色的，或者是黑色的 根节点是黑色的 每一个叶子节点（最后的空节点） 是黑色的 如果一个节点是红色的，那么他的孩</description>
    </item>
    
    <item>
      <title>数据结构-红黑树</title>
      <link>http://localhost:1313/posts/data-struct/rbtree/</link>
      <pubDate>Tue, 29 Dec 2020 22:10:09 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/data-struct/rbtree/</guid>
      <description>红黑树性质 结合 2-3 树理解 每个节点或者是红色的，或者是黑色的 根节点是黑色的 每一个叶子节点（最后的空节点） 是黑色的 如果一个节点是红色的，那么他的孩</description>
    </item>
    
    <item>
      <title>数据结构-avl树</title>
      <link>http://localhost:1313/post/data-struct/avl/</link>
      <pubDate>Mon, 28 Dec 2020 15:29:41 +0800</pubDate>
      
      <guid>http://localhost:1313/post/data-struct/avl/</guid>
      <description>平衡二叉树和 AVL 树 对于任意一个节点，左子树和右子树的高度差不能超过 1 平衡二叉树的高度和节点数量之间的关系也是 O(logn)的 平衡因子 判断一棵树</description>
    </item>
    
    <item>
      <title>数据结构-avl树</title>
      <link>http://localhost:1313/posts/data-struct/avl/</link>
      <pubDate>Mon, 28 Dec 2020 15:29:41 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/data-struct/avl/</guid>
      <description>平衡二叉树和 AVL 树 对于任意一个节点，左子树和右子树的高度差不能超过 1 平衡二叉树的高度和节点数量之间的关系也是 O(logn)的 平衡因子 判断一棵树</description>
    </item>
    
    <item>
      <title>数据结构-并查集</title>
      <link>http://localhost:1313/post/data-struct/unionfind/</link>
      <pubDate>Sat, 26 Dec 2020 13:19:07 +0800</pubDate>
      
      <guid>http://localhost:1313/post/data-struct/unionfind/</guid>
      <description>解决连接问题 数据结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 public class UnionFind implements UF { // rank[i]表示以i为根的集合所表示的树的层数 // 在</description>
    </item>
    
    <item>
      <title>数据结构-并查集</title>
      <link>http://localhost:1313/posts/data-struct/unionfind/</link>
      <pubDate>Sat, 26 Dec 2020 13:19:07 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/data-struct/unionfind/</guid>
      <description>解决连接问题 数据结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 public class UnionFind implements UF { // rank[i]表示以i为根的集合所表示的树的层数 // 在</description>
    </item>
    
    <item>
      <title>数据结构-线段树</title>
      <link>http://localhost:1313/post/data-struct/segmenttree/</link>
      <pubDate>Wed, 23 Dec 2020 20:36:10 +0800</pubDate>
      
      <guid>http://localhost:1313/post/data-struct/segmenttree/</guid>
      <description>线段树 线段树是算法竞赛中常用的用来维护 区间信息 的数据结构。 线段树可以在log(n)的时间复杂度内实现单点修改、 区间修改、区间查询（区间求和，</description>
    </item>
    
    <item>
      <title>数据结构-线段树</title>
      <link>http://localhost:1313/posts/data-struct/segmenttree/</link>
      <pubDate>Wed, 23 Dec 2020 20:36:10 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/data-struct/segmenttree/</guid>
      <description>线段树 线段树是算法竞赛中常用的用来维护 区间信息 的数据结构。 线段树可以在log(n)的时间复杂度内实现单点修改、 区间修改、区间查询（区间求和，</description>
    </item>
    
    <item>
      <title>数据结构-堆</title>
      <link>http://localhost:1313/post/data-struct/heap/</link>
      <pubDate>Tue, 22 Dec 2020 16:24:35 +0800</pubDate>
      
      <guid>http://localhost:1313/post/data-struct/heap/</guid>
      <description>堆的基本结构 二叉堆 (Binary Heap) 二叉堆是一颗完全二叉树（把元素顺序排列成树的形状） 堆中每个节点的值总是不大于其父节点的值 （最大堆） 用数组储存二叉堆 parent(i) =</description>
    </item>
    
    <item>
      <title>数据结构-堆</title>
      <link>http://localhost:1313/posts/data-struct/heap/</link>
      <pubDate>Tue, 22 Dec 2020 16:24:35 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/data-struct/heap/</guid>
      <description>堆的基本结构 二叉堆 (Binary Heap) 二叉堆是一颗完全二叉树（把元素顺序排列成树的形状） 堆中每个节点的值总是不大于其父节点的值 （最大堆） 用数组储存二叉堆 parent(i) =</description>
    </item>
    
    <item>
      <title>数据结构-二分搜索树</title>
      <link>http://localhost:1313/post/data-struct/bst/</link>
      <pubDate>Sat, 19 Dec 2020 17:06:28 +0800</pubDate>
      
      <guid>http://localhost:1313/post/data-struct/bst/</guid>
      <description>二叉树 二叉树具有唯一根节点 二叉树每个节点最多有两个孩子 二叉树每个节点最多有一个父亲 二叉树具有天然的递归结构 每个节点的左右子树都是二叉树 二叉树</description>
    </item>
    
    <item>
      <title>数据结构-二分搜索树</title>
      <link>http://localhost:1313/posts/data-struct/bst/</link>
      <pubDate>Sat, 19 Dec 2020 17:06:28 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/data-struct/bst/</guid>
      <description>二叉树 二叉树具有唯一根节点 二叉树每个节点最多有两个孩子 二叉树每个节点最多有一个父亲 二叉树具有天然的递归结构 每个节点的左右子树都是二叉树 二叉树</description>
    </item>
    
    <item>
      <title>数据结构-链表</title>
      <link>http://localhost:1313/post/data-struct/linkedlist/</link>
      <pubDate>Wed, 16 Dec 2020 16:37:11 +0800</pubDate>
      
      <guid>http://localhost:1313/post/data-struct/linkedlist/</guid>
      <description>linkedList 真正的动态数据结构 最简单的动态数据结构 更深入的理解引用（或者指针） 更深入的理解递归 辅助组成其他数据结构 优点：真正的动态，不需要处理固定容量</description>
    </item>
    
    <item>
      <title>数据结构-链表</title>
      <link>http://localhost:1313/posts/data-struct/linkedlist/</link>
      <pubDate>Wed, 16 Dec 2020 16:37:11 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/data-struct/linkedlist/</guid>
      <description>linkedList 真正的动态数据结构 最简单的动态数据结构 更深入的理解引用（或者指针） 更深入的理解递归 辅助组成其他数据结构 优点：真正的动态，不需要处理固定容量</description>
    </item>
    
    <item>
      <title>数据结构-栈、队列</title>
      <link>http://localhost:1313/post/data-struct/stackandqueue/</link>
      <pubDate>Fri, 11 Dec 2020 21:57:46 +0800</pubDate>
      
      <guid>http://localhost:1313/post/data-struct/stackandqueue/</guid>
      <description>Stack 栈也是一种线性结构 相比数组，栈对应的操作是数组的子集 只能从一段添加元素，也只能从一段取出元素 这一端称为栈顶 栈是一种 后进先出 的数据结构 Last In First</description>
    </item>
    
    <item>
      <title>数据结构-栈、队列</title>
      <link>http://localhost:1313/posts/data-struct/stackandqueue/</link>
      <pubDate>Fri, 11 Dec 2020 21:57:46 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/data-struct/stackandqueue/</guid>
      <description>Stack 栈也是一种线性结构 相比数组，栈对应的操作是数组的子集 只能从一段添加元素，也只能从一段取出元素 这一端称为栈顶 栈是一种 后进先出 的数据结构 Last In First</description>
    </item>
    
    <item>
      <title>数据结构-数组</title>
      <link>http://localhost:1313/post/data-struct/array/</link>
      <pubDate>Thu, 10 Dec 2020 21:13:46 +0800</pubDate>
      
      <guid>http://localhost:1313/post/data-struct/array/</guid>
      <description>定义 在 Java 中数组定义为承载某种类型元素可重复集合。 数据结构 1 2 3 4 5 6 7 8 9 10 11 public class Array&amp;lt;E&amp;gt; { /** * 数组内容 */ private E[] data; /** * 数组中元素的个数 */ private int size; } capacity 为</description>
    </item>
    
    <item>
      <title>数据结构-数组</title>
      <link>http://localhost:1313/posts/data-struct/array/</link>
      <pubDate>Thu, 10 Dec 2020 21:13:46 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/data-struct/array/</guid>
      <description>定义 在 Java 中数组定义为承载某种类型元素可重复集合。 数据结构 1 2 3 4 5 6 7 8 9 10 11 public class Array&amp;lt;E&amp;gt; { /** * 数组内容 */ private E[] data; /** * 数组中元素的个数 */ private int size; } capacity 为</description>
    </item>
    
  </channel>
</rss>
